// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 旅行の基本情報を管理するテーブル
model Itinerary {
  id          Int      @id @default(autoincrement())
  title       String // 旅行のタイトル（例: 東京観光プラン）
  destination String // 旅行先（例: 東京）
  startDate   DateTime // 旅行開始日
  endDate     DateTime // 旅行終了日
  description String? // 旅行の説明（任意）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 関連テーブル
  days Day[] // 旅行の各日のスケジュール

  // ユーザー関連（将来的に必要であれば）
  // userId      String
  // user        User       @relation(fields: [userId], references: [id])
}

// 旅行の日ごとのスケジュールを管理するテーブル
model Day {
  id        Int      @id @default(autoincrement())
  date      DateTime // この日の日付
  dayNumber Int // 旅行の何日目か（1日目、2日目...）
  memo      String? // その日の全体メモ（任意）

  // 関連付け
  itineraryId Int // 所属する旅行ID
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  places      Place[] // この日に訪れる場所のリスト

  @@unique([itineraryId, dayNumber]) // 同じ旅行内で日数が重複しないようにする
}

// 各日に訪れる場所の詳細情報
model Place {
  id          Int      @id @default(autoincrement())
  name        String // 場所の名前（例: 東京スカイツリー）
  time        String // 訪問予定時間（例: 10:00）
  description String? // 場所の説明（任意）
  address     String? // 住所（任意）
  mapUrl      String? // 地図URL（任意）
  imageUrl    String? // 画像URL（任意）
  cost        Int? // 予想費用（任意）
  category    Category @default(OTHER) // 場所のカテゴリ
  priority    Int      @default(0) // 表示順（同じ日の中での順序）

  // 関連付け
  dayId Int // 所属する日ID
  day   Day @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId, priority]) // 日別の順序でのソートを効率化
}

// 場所のカテゴリを定義する列挙型
enum Category {
  ATTRACTION // 観光スポット
  RESTAURANT // 飲食店
  HOTEL // ホテル・宿泊施設
  SHOPPING // ショッピング
  TRANSPORT // 交通機関
  ACTIVITY // アクティビティ
  OTHER // その他
}

// 将来的に必要であればユーザーモデルも追加
// model User {
//   id            String       @id @default(uuid())
//   email         String       @unique
//   name          String?
//   itineraries   Itinerary[]
// }
